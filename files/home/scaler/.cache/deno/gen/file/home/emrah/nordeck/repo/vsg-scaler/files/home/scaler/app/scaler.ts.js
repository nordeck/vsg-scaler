import { serve } from "https://deno.land/std@0.211.0/http/server.ts";
import { STATUS_CODE } from "https://deno.land/std@0.211.0/http/status.ts";
import { DEBUG, HOSTNAME, JICOFO, PORT, PRE } from "./config.ts";
import { addHost, removeHost } from "./lifecycle.ts";
export let MIN_REQUIRED = 2;
export let MAX_ALLOWED = 80;
export let BULK_MAX = 5;
function notFound() {
  return new Response(null, {
    status: STATUS_CODE.NotFound
  });
}
function methodNotAllowed() {
  return new Response(null, {
    status: STATUS_CODE.MethodNotAllowed
  });
}
function badRequest() {
  return new Response(null, {
    status: STATUS_CODE.BadRequest
  });
}
function conflict() {
  return new Response(null, {
    status: STATUS_CODE.Conflict
  });
}
function succeeded() {
  return new Response(null, {
    status: STATUS_CODE.NoContent
  });
}
function ok(body) {
  return new Response(body, {
    status: STATUS_CODE.OK
  });
}
async function totalInstance() {
  try {
    const res = await fetch(JICOFO, {
      headers: {
        "Accept": "application/json"
      }
    });
    const stats = await res.json();
    return Number(stats.sip_jibri_detector.count);
  } catch  {
    return undefined;
  }
}
async function availableInstance() {
  try {
    const res = await fetch(JICOFO, {
      headers: {
        "Accept": "application/json"
      }
    });
    const stats = await res.json();
    return Number(stats.sip_jibri_detector.available);
  } catch  {
    return undefined;
  }
}
function remove(host) {
  removeHost(host);
  return ok("accepted");
}
async function removeHandler(req) {
  try {
    const pl = await req.json();
    const host = pl.host;
    const reason = pl.reason;
    if (DEBUG) {
      console.log(`remove request is received from ${host} for ${reason}`);
    }
    if (reason != "idle") return remove(host);
    const currentAvailable = await availableInstance();
    if (currentAvailable !== undefined && currentAvailable <= MIN_REQUIRED) {
      if (DEBUG) console.log(`minimum limit, rejected`);
      return ok("keep");
    }
    return remove(host);
  } catch  {
    if (DEBUG) console.log(`bad request`);
    return badRequest();
  }
}
function add(instanceType) {
  addHost(instanceType);
  return succeeded();
}
async function addHandler(req) {
  try {
    const pl = await req.json();
    const instanceType = pl.instance_type;
    if (DEBUG) console.log(`add request is received for ${instanceType}`);
    const currentTotal = await totalInstance();
    if (currentTotal === undefined) {
      if (DEBUG) console.log(`no jicofo, rejected`);
      return conflict();
    }
    if (currentTotal >= MAX_ALLOWED) {
      if (DEBUG) console.log(`no space for a new instance, rejected`);
      return conflict();
    }
    return add(instanceType);
  } catch  {
    if (DEBUG) console.log(`bad request`);
    return badRequest();
  }
}
async function updateMin(req) {
  try {
    const pl = await req.json();
    const min = parseInt(pl);
    if (DEBUG) console.log(`update request is received to set min as ${min}`);
    if (!min) throw new Error();
    if (min < 1 || min > 100) throw new Error();
    MIN_REQUIRED = min;
    if (DEBUG) console.log(`min is updated`);
    return succeeded();
  } catch  {
    if (DEBUG) console.log(`bad request`);
    return badRequest();
  }
}
async function updateMax(req) {
  try {
    const pl = await req.json();
    const max = parseInt(pl);
    if (DEBUG) console.log(`update request is received to set max as ${max}`);
    if (!max) throw new Error();
    if (max < 1 || max > 1000) throw new Error();
    MAX_ALLOWED = max;
    if (DEBUG) console.log(`max is updated`);
    return succeeded();
  } catch  {
    if (DEBUG) console.log(`bad request`);
    return badRequest();
  }
}
async function updateBulkMax(req) {
  try {
    const pl = await req.json();
    const max = parseInt(pl);
    if (DEBUG) {
      console.log(`update request is received to set bulk-max as ${max}`);
    }
    if (!max) throw new Error();
    if (max < 1 || max > 100) throw new Error();
    BULK_MAX = max;
    if (DEBUG) console.log(`bulk-max is updated`);
    return succeeded();
  } catch  {
    if (DEBUG) console.log(`bad request`);
    return badRequest();
  }
}
function getMin() {
  return ok(JSON.stringify(MIN_REQUIRED));
}
function getMax() {
  return ok(JSON.stringify(MAX_ALLOWED));
}
function getBulkMax() {
  return ok(JSON.stringify(BULK_MAX));
}
async function handler(req) {
  const url = new URL(req.url);
  const path = url.pathname;
  if (req.method === "POST") {
    if (path === `${PRE}/instance`) {
      return await addHandler(req);
    } else if (path === `${PRE}/min`) {
      return await updateMin(req);
    } else if (path === `${PRE}/max`) {
      return await updateMax(req);
    } else if (path === `${PRE}/bulk-max`) {
      return await updateBulkMax(req);
    } else {
      return notFound();
    }
  } else if (req.method === "DELETE") {
    if (path === `${PRE}/instance`) {
      return await removeHandler(req);
    } else {
      return notFound();
    }
  } else if (req.method === "GET") {
    if (path === `${PRE}/min`) {
      return getMin();
    } else if (path === `${PRE}/max`) {
      return getMax();
    } else if (path === `${PRE}/bulk-max`) {
      return getBulkMax();
    } else {
      return notFound();
    }
  } else if (req.method === "OPTIONS") {
    return succeeded();
  } else {
    return methodNotAllowed();
  }
}
function main() {
  serve(handler, {
    hostname: HOSTNAME,
    port: PORT
  });
}
main();
//# sourceMappingURL=data:application/json;base64,